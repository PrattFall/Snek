
==================== FINAL INTERFACE ====================
2016-03-25 00:21:28.60744 UTC

interface main@main:Main 7103
  interface hash: cd8542a825ad907d32a6baf3b8eda06f
  ABI hash: b3dd049d5e080ccd8a6e1847856e19c1
  export-list hash: 57f48c62a2dca405328e15e88637983b
  orphan hash: 693e9af84d3dfcc71e640e005bdc5e2e
  flag hash: 3133cecfa17bb25e2b4ef2bfb8205840
  sig of: Nothing
  used TH splices: False
  where
exports:
  Main.gameLoop
  Main.main
module dependencies:
package dependencies: base-4.8.2.0* ghc-prim-0.4.0.0
                      integer-gmp-1.0.0.0 snake-0.0.1.0@snake_Fl2eL9xvVIkFKyiu4RtRAc
orphans: base-4.8.2.0:GHC.Base base-4.8.2.0:GHC.Float
family instance modules: base-4.8.2.0:Control.Applicative
                         base-4.8.2.0:Data.Either base-4.8.2.0:Data.Monoid
                         base-4.8.2.0:Data.Type.Equality base-4.8.2.0:GHC.Generics
import  -/  base-4.8.2.0:Prelude 694dcaf039efe62df1c44834e2dbd2fb
import  -/  base-4.8.2.0:System.IO 0899686bfc1d9ef72dff3de85e99862a
import  -/  ghc-prim-0.4.0.0:GHC.Types 6b27fb3fdbd0e3f0925a4496c66513bb
import  -/  snake-0.0.1.0@snake_Fl2eL9xvVIkFKyiu4RtRAc:Snek f366ed78fde53c920c47f74210648323
6edee9336bbffa5e9155e29cb1c87fc3
  gameLoop ::
    Snek.MapSize -> Snek.Snake -> Snek.Food -> GHC.Types.IO ()
  {- Arity: 4,
     Strictness: <L,U(U(U),U(U))><L,U(1*U,U)><L,U(U(U),U(U))><L,U>,
     Unfolding: InlineRule (0, True, True)
                Main.gameLoop1
                  `cast`
                (<Snek.MapSize>_R
                 ->_R <Snek.Snake>_R
                 ->_R <Snek.Food>_R
                 ->_R Sym (GHC.Types.NTCo:IO[0] <()>_R)) -}
e2266951083c55cb6061bb4186ad2004
  gameLoop1 ::
    Snek.MapSize
    -> Snek.Snake
    -> Snek.Food
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 4,
     Strictness: <L,U(U(U),U(U))><L,U(1*U,U)><L,U(U(U),U(U))><L,U> -}
a90587c06289ad7e24f4d07ff1be8b31
  main :: GHC.Types.IO ()
  {- Arity: 1,
     Unfolding: InlineRule (0, True, True)
                Main.main1 `cast` (Sym (GHC.Types.NTCo:IO[0] <()>_R)) -}
15cc53b57dde15465d37a9b59a5b08d4
  main1 ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 1,
     Unfolding: (Main.gameLoop1 Main.main10 Main.main5 Main.main2) -}
1627a21d2f64f747c0c7ba49bfcfade2
  main10 :: Snek.MapSize
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (Snek.MapSize Main.main11 Main.main9) -}
a01d6a874f731c693852c59ead6c01cf
  main11 :: GHC.Types.Int
  {- HasNoCafRefs, Strictness: m, Unfolding: (GHC.Types.I# 16) -}
060119a75dbab34906fdb3cf5056d668
  main12 ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 1,
     Unfolding: (GHC.TopHandler.runMainIO1
                   @ ()
                   Main.main1 `cast` (Sym (GHC.Types.NTCo:IO[0] <()>_R))) -}
dca612be4dc14bf77052d474b470a6e6
  main2 :: Snek.Point
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (Snek.Point Main.main4 Main.main3) -}
9196276e515f828b6b092698355a927b
  main3 :: GHC.Types.Int
  {- HasNoCafRefs, Strictness: m, Unfolding: (GHC.Types.I# 5) -}
ee4dbf04acfd143992518c7535b0876b
  main4 :: GHC.Types.Int
  {- HasNoCafRefs, Strictness: m, Unfolding: (GHC.Types.I# 3) -}
1174debde4292667495b9545b4fad33c
  main5 :: Snek.Snake
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (Snek.Snake Snek.E Main.main6) -}
cc50d68d96dbbcd4ce44e3a6cce5f59d
  main6 :: [Snek.SnakeBit]
  {- HasNoCafRefs, Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ Snek.SnakeBit
                   Main.main7
                   (GHC.Types.[] @ Snek.SnakeBit)) -}
a5681c8482c4aaffae7c03b762fdfbce
  main7 :: Snek.Point
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (Snek.Point Main.main9 Main.main8) -}
ddb847bc41592216f47a6fa5024e9fed
  main8 :: GHC.Types.Int
  {- HasNoCafRefs, Strictness: m, Unfolding: (GHC.Types.I# 4) -}
9dbfcacd7e9d06951441ce2d14fb6d06
  main9 :: GHC.Types.Int
  {- HasNoCafRefs, Strictness: m, Unfolding: (GHC.Types.I# 8) -}
vectorised variables:
vectorised tycons:
vectorised reused tycons:
parallel variables:
parallel tycons:
trusted: safe
require own pkg trusted: False

